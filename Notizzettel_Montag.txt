C++ Einführung

Guten Morgen 

Peter Loos

C/C++,  Java, C#, Mobile Apps (Java), JavaScript, (Python)

20 Jahre Development (C/C++)

peter.loos@gmx.de
-----------------

https://peterloos.de/

https://github.com/pelocpp

https://github.com/pelocpp/cpp_introduction

====================================================================

Was sind meine Erwartungen / Wünsche ???????????????????

Wo stehe ich ...?
Wo soll's hin?
Was ist wichtig?

IDE?  VS Code ?!?! Visual Studio

Python ==> C++

NVidia Jetson

====================================================================

2 Tools:

Visual Studio

Github.com

====================================================================

Namensräume  // namespace

2 Phasen der Übersetzung:

a) Syntax:   C/C++ COMPILER

   Wenn keine Fehler: C/C++ Object File (*.obj)
   Linux:             C/C++ Object File (*.o)

b) Programm erstellen (bauen):  C/C++ LINKER

C:\Development\x64\Debug\GettingStarted.exe

  Windows: Ausführbares Programm: .exe
  Linux:   Ausführbares Programm: keine Endung

// =====================================================

Klasse und Objekt

== Eine Klasse beschreibt Daten UND Methoden

== Zu / von einer Klasse legt man ein oder mehrere Objekte an

Einfach gesagt: Ein Objekt ist eine Variable vom Typ der Klasse

Python:  Als ersten Parameter _self (Methode)

In C++ benötigen wir hierfür 3 Dateien:

a) Beschreibung der Klasse (Header-Datei)
b) Realisierung der Klasse (Implementierungs-Datei / .cpp)  ===> .obj
c) Anwendung / Gebrauch der Klasse

An einem Beispiel: Uhrzeit

a) Beschreibung der Klasse:           Time.h
b) Realisierung der Klasse:           Time.cpp
c) Anwendung / Gebrauch der Klasse    Program.cpp

// =====================================================

Objekt-Orientierung

Daten eines Objekts:

Zielsetzungen / Paradigma:

Jedes Objekt besitzt zu jedem Zeitpunkt GÜLTIGE DATEN.

Zugriffsschutz:

Man verbietet den DIREKTEN Zugriff auf die Membervariablen.

Lösung, um dennoch eine Membervariable verändern zu können:

Spezielle Methode: setter / getter

Diese müssen die Parameterwerte auf KORREKTHEIT überprüfen !!!

// =====================================================

Objekt-Orientierung

Daten eines Objekts:

Zielsetzungen / Paradigma:

Jedes Objekt besitzt bereits bei seiner Erzeugung GÜLTIGE DATEN.

Spezielle Methoden: Konstruktor

SYNTAX:   

Python: __init__

C++:    Name der Methode == Name der Klasse

UND: Es gibt KEINEN Rückgabetyp (auch nicht void)

// ===========================================================

Klasse und Objekt

Zugriffsschutz // private // public

getter // setter

Konstruktor: Standard-Konstruktor - um eine leeres Objekt vorzubelegen.

==============================================================

Windows:       .h
Linux/Unix:    .hpp

Header-Dateien:

// =====================================================

Parameterübergabe:
------------------

Wie werden in C/C++ Parameter an Unterprogramme übergeben ???

Als KOPIE - per Default / Voreinstellung // Call-by-Copy // Call-by-Value
Als Adresse - mit & Operator // Call-by-Address

Wieso ????

==> Parameterübergabemechanismus.

Speicher: Stack und Heap.

Wie kann das sein, dass lokale Variablen nur dann "im Speicher sind",
wenn die Funktion gerade aufgerufen wird ???

Unterprogrammaufrufmechanismus

Stack Frame

Microcomputer Programmierung

=============================================

Frage:  Zeiger und / oder Referenzen.

Hinweis:  C / C++

C ist eine prozedurale Sprache 
C++ ist der Nachfolger von C
C ist in C++ eine ECHTE TEILMENGE / enthalten.

i)  Zeiger (Pointer):       C
ii) Referenzen (Reference): C++

Unterschiede zwischen Zeigern und Referenzen:

i)  Es gibt NULL-Zeiger
ii) Es gibt KEINE NULL-Referenz

Eine Referenz-Variable ist ein ALIAS (Stellvertreter) der referenzierten Variablen.


Nebenbemerkung:

Call-by-Copy // Call-by-Value: Es können KONSTANTEN übergeben werden.
Call-by-Address:               KONSTANTEN können NICHT übergeben werden.

Tipp:

Bei Parameterübergabe:

Go-for-Referenz:

== Besser lesbar
== C++ stilistisch

Go-for-Adresse (Zeiger / Pointer):  // Ginge

== Schlechter lesbar
== C stilistisch

=============================================

Hinweis:

Dynamische Speicherverwaltung (new, delete):

Zeiger:    Geht nur MIT Zeigern

Referenz:  Geht NICHT mit Referenzen


=============================================

Mehrere Operatoren:  Zum Beispiel * und .

Vorrangregeln.

*   Prio 3
.   Prio 2

=============================================

Const-ness: Keyword 'const'

Dadurch wird der verändernde (schreibende) Zugriff verboten.

A) Bei Referenzen, die als Parameter übergeben werden.
    
    void displayTime(const Time& time) 

b) Bei Methoden in einer Klasse, um zum Ausdruck zu bringen,
   dass diese ihre Member NICHT verändern.

Es gibt da noch eine zweite Auswirkung:

Der Maschinencode kann BESSER optimiert werden.

// ======================================================

Stolperfalle:  "What is the purpose of the Most Vexing Parse?"

    Time than(); 
    than.print();

    left of '.print' must have class/struct/union

Was ist than ???

Ein Objekt: NEIN.

than ist eine Funktion, die keine Parameter hat und ein Objekt Time zurückliefert.

=============================================================

Nochmal Rechteck:

a) Bei der Erzeugung eines Rectangle-Objekts mit einem benutzerdefinierten Konstruktor
werden die Koordinaten, die Breite und die Höhe des Rechtecks
entsprechend der Parameter des Konstruktors gesetzt.

b) Bei der Erzeugung eines Rectangle-Objekts mit einem benutzerdefinierten Konstruktor
werden die Breite und die Höhe des Rechtecks
entsprechend der Parameter des Konstruktors gesetzt.
Die Koordinaten nehmen den Wert 0 an.

c) Es wäre cool, wenn "der eine" Konstruktor "den anderen" verwendet.

=============================================================
